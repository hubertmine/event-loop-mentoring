'use strict';

const StatsDClient = require('node-statsd');

/**
 * Builds the configuration to pass to the StatsD client from the environment names decided previously.
 *
 * @param {Object} options A key - value that respect the contract stated in the Readme for defining a single
 *   destination with multiple environment variables
 *
 * @returns {Object} an object suitable to pass as options to the StatsD client constructor
 */
function buildConfig(options) {
  return {
    host: options.METRICS_HOST || null,
    port: options.METRICS_PORT || null,
    prefix: options.METRICS_PREFIX || '',
    suffix: options.METRICS_SUFFIX || '',
    cacheDns: options.METRICS_CACHE_DNS === 'true'
  };
}

const configs = [];
if (process.env.METRICS_HOST) {
  configs.push(buildConfig(process.env));
}

if (process.env.METRICS_DESTINATIONS) {
  for (const destination of JSON.parse(process.env.METRICS_DESTINATIONS)) {
    configs.push(buildConfig(destination));
  }
}

if (configs.length === 0) {
  configs.push(buildConfig({}));
}

if (configs.length === 1) {
  module.exports = new StatsDClient(configs[0]);
} else {
  /**
   * This class is a proxy to several StatsD clients. It has the same methods, and their implementation
   * consists in calling the method on each of the clients.
   *
   * @param {Array<StatsDClient>} clients A list of StatsD client to proxy
   * @constructor
   */
  const StatsDClientsProxy = function StatsDClientsProxy(clients) {
    this.clients = clients;
  };
  /**
   * Iterate on the StatsDClient.prototype to recreate all the methods on the StatsDClientsProxy class
   */
  for (const publicMethodName in StatsDClient.prototype) {
    if (StatsDClient.prototype.hasOwnProperty(publicMethodName)) {
      StatsDClientsProxy.prototype[publicMethodName] = function methodImplementation() {
        for (const client of this.clients) {
          client[publicMethodName].apply(client, arguments);
        }
      };
    }
  }
  const clients = configs.map(config => new StatsDClient(config));
  module.exports = new StatsDClientsProxy(clients);
}
