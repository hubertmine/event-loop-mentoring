'use strict';

const dgram = require('dgram');
const expect = require('chai').expect;
const rewire = require('rewire');

describe('index.js', () => {
  let oldEnv;
  beforeEach(() => {
    oldEnv = process.env;
  });

  afterEach(() => {
    process.env = oldEnv;
  });

  describe('when configuration variables are not set', () => {
    it('should not crash', () => {
      process.env = {};
      const metrics = rewire('../index');
      metrics.increment('hello');
    });
  });

  describe('when configuration is specified with individual variables', () => {
    it('should send metrics on UDP port', function* it() {
      process.env = {
        METRICS_HOST: 'localhost',
        METRICS_PORT: '18125',
        METRICS_PREFIX: 'prefix.',
        METRICS_SUFFIX: '.suffix'
      };
      const metrics = rewire('../index');
      const server = dgram.createSocket('udp4');

      const listening = new Promise(resolve => {
        server.on('listening', resolve);
      });

      server.bind(18125);

      yield listening;

      const done = new Promise((resolve, reject) => {
        server.on('error', () => reject);
        server.on('message', msg => {
          expect(msg.toString()).to.be.eql('prefix.hello.suffix:1|c');
          resolve();
        });
      });

      metrics.increment('hello');

      yield done;
    });
  });

  describe('when configuration is specified with a single METRICS_DESTINATIONS variable', () => {
    it('should send metrics on UDP port for both servers', function* it() {
      process.env = {
        METRICS_DESTINATIONS: JSON.stringify([{
          METRICS_HOST: 'localhost',
          METRICS_PORT: '18127',
          METRICS_PREFIX: 'prefix1.',
          METRICS_SUFFIX: '.suffix1'
        }, {
          METRICS_HOST: 'localhost',
          METRICS_PORT: '18128',
          METRICS_PREFIX: 'prefix2.',
          METRICS_SUFFIX: '.suffix2'
        }])
      };
      const metrics = rewire('../index');

      const server1 = dgram.createSocket('udp4');
      const server2 = dgram.createSocket('udp4');

      const listening = [
        new Promise(resolve => {
          server1.on('listening', resolve);
        }),
        new Promise(resolve => {
          server2.on('listening', resolve);
        })
      ];

      server1.bind(18127);
      server2.bind(18128);

      yield listening;

      const done = [
        new Promise((resolve, reject) => {
          server1.on('error', reject);
          server1.on('message', msg => {
            expect(msg.toString()).to.be.eql('prefix1.helloTiming.suffix1:42|ms');
            resolve();
          });
        }),
        new Promise((resolve, reject) => {
          server2.on('error', reject);
          server2.on('message', msg => {
            expect(msg.toString()).to.be.eql('prefix2.helloTiming.suffix2:42|ms');
            resolve();
          });
        })
      ];

      metrics.timing('helloTiming', 42);

      yield done;
    });
  });
});
